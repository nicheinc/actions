name: Build, Test, and Ship
permissions:
  contents: read
on:
  workflow_call:
    # TODO: Pass services via inputs.
    secrets:
      DEV_AWS_CREDENTIALS:
        required: true
      ECR_ACCESS_KEY_ID:
        required: true
      ECR_SECRET_ACCESS_KEY:
        required: true
      GHA_DEV_KEY:
        required: true
      SLACK_BOT_TOKEN:
        required: true

env:
  SERVICES: entity entity-updater algolia-updater

jobs:
  # Retrieves Go version from go.mod and returns all Go versions released since
  # if PR or push to dev/master
  go-versions:
    name: Check Go versions
    runs-on: ubuntu-latest
    if: ${{ !github.event.release }}
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Go versions
        uses: arnested/go-version-action@v1
        id: versions

  # Run unit tests and go vet with each Go version returned from go-versions job
  # if PR or push to dev/master
  unit-test-and-vet:
    name: "Unit test and vet with Go ${{ matrix.go }}"
    runs-on: ubuntu-latest
    if: ${{ !github.event.release }}
    needs: go-versions
    strategy:
      fail-fast: false
      matrix:
        go: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Test
        run: |
          go test -v -cover -race ./...

      - name: Vet
        run: |
          go vet ./...

  amazon-ecr:
    name: "Login to Amazon ECR"
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.login-ecr.outputs.registry }}
      test: test
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

  # Builds the docker image if PR or push to dev/master,
  # ships if Release
  build-and-ship-image:
    name: "Build ${{ matrix.service }} image"
    runs-on: ubuntu-latest
    needs: amazon-ecr
    strategy:
      fail-fast: false
      matrix:
        service: ["entity", "entity-updater", "algolia-updater"]
    steps:
      ### Common steps
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build final image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=${{ matrix.service }}.tar
          tags: ${{ matrix.service }}:ci

      - name: Upload docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ${{ matrix.service }}.tar
          retention-days: 1

      ### Release-specific steps
      - name: Build and ship final image
        uses: docker/build-push-action@v2
        if: ${{ github.event.release }}
        env:
          ECR_REGISTRY: ${{ needs.amazon-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.service }}
          IMAGE_TAG: ${{ github.ref_name }}
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

  run-api-proctor-tests:
    name: Run api-proctor tests
    runs-on: ubuntu-latest
    needs: [amazon-ecr, build-and-ship-image]
    steps:
      - name: Checkout development repo
        uses: actions/checkout@v2
        with:
          repository: nicheinc/development
          ssh-key: ${{ secrets.GHA_DEV_KEY }}

      - name: Download docker image artifacts
        uses: actions/download-artifact@v3

      - name: Load docker images
        shell: bash
        run: |
          for service in ${SERVICES}; do
            docker load --input ${service}/${service}.tar
          done

      - name: Create docker-compose override and AWS credentials files
        env:
          ENCODED_CREDENTIALS: ${{ secrets.DEV_AWS_CREDENTIALS }}
        shell: bash
        run: |
          echo "services:" >> docker-compose.ci.yaml
          for service in ${SERVICES}; do
            echo -e "  ${service}:\n    image: ${service}:ci" >> docker-compose.ci.yaml
          done
          echo $ENCODED_CREDENTIALS | base64 -di > vault/aws_credentials

      - name: Launch service with dependencies in docker-compose
        env:
          REGISTRY: ${{ needs.amazon-ecr.outputs.registry }}
        shell: bash
        run: docker-compose -f docker-compose.yml -f docker-compose.ci.yaml up -d ${SERVICES}

      - name: api-proctor health check test
        env:
          ECR_REGISTRY: ${{ needs.amazon-ecr.outputs.registry }}
          PGADMIN_PORT: 5000
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_SERVER: postgres
          POSTGRES_PORT: 5432
        shell: bash
        run: |
          docker run \
            --rm \
            --name api-proctor \
            --network host \
            $ECR_REGISTRY/api-proctor:v1.3.0 \
            ${{ github.event.repository.name }}/health.get --testPathIgnorePatterns=/src/ --passWithNoTests

      - name: Docker Compose logs
        shell: bash
        run: |
          echo "::group::Docker ${{ github.event.repository.name }} logs"
          echo "--- Kafka logs ---"
          docker-compose logs kafka || echo "Kafka not running"
          echo "--- Postgres logs ---"
          docker-compose logs postgres || echo "Postgres not running"
          for service in ${SERVICES}; do
            echo "--- ${service} logs ---"
            docker-compose logs ${service}
          done
          echo "::endgroup::"

  # Post release status to #deployment
  update-slack:
    name: Update Slack
    runs-on: ubuntu-latest
    needs: build-and-ship-image
    if: ${{ github.event.release }}
    steps:
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.17.0
        with:
          channel-id: 'C2C5JV162'
          slack-message: "GitHub has built `${{ github.event.repository.name }}:${{ github.ref_name }}` for release. :shipitparrot: "
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
