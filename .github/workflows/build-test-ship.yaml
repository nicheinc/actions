name: Build, Test, and Ship
permissions:
  contents: read
on:
  workflow_call:
    inputs:
      services:
        description: >
          A JSON array containing the names of all services in the repo: the
          eponymous microservice itself, any associated Kafka consumers, etc.
        required: true
        type: string
    secrets:
      DEV_AWS_CREDENTIALS:
        required: true
      ECR_ACCESS_KEY_ID:
        required: true
      ECR_SECRET_ACCESS_KEY:
        required: true
      NPM_WRITE_TOKEN:
        required: true
      SLACK_BOT_TOKEN:
        required: true

jobs:
  # Retrieve the minimum Go version from go.mod and output a matrix of all Go
  # versions released since. Skip on release.
  go-versions:
    name: Get supported Go versions
    runs-on: ubuntu-latest
    if: ${{ !github.event.release }}
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Go versions
        uses: arnested/go-version-action@v1
        id: versions

  # Run unit tests and go vet with each supported Go version. Skip on release.
  unit-test-and-vet:
    name: "Unit test and vet with Go ${{ matrix.go }}"
    runs-on: ubuntu-latest
    if: ${{ !github.event.release }}
    needs: go-versions
    strategy:
      fail-fast: false
      matrix:
        go: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Test
        run: |
          go test -v -cover -race ./...

      - name: Vet
        run: |
          go vet ./...

  # Build the docker images on PR or push to dev/master, ship on release.
  build-and-ship-image:
    name: "Build ${{ matrix.service }} image"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(inputs.services) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Build and upload image artifact for use in api-proctor tests.
      - name: Build image for CI
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=${{ matrix.service }}.tar
          tags: ${{ matrix.service }}:ci

      - name: Upload docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}
          path: ${{ matrix.service }}.tar
          retention-days: 1

      # TODO: Disabled for development. Reenable before this branch is merged.
      # On push/PR, ensure service images can be built on target platforms.
      # - name: Build final images
      #  uses: docker/build-push-action@v2
      #  if: ${{ !github.event.release }}
      #  with:
      #    context: .
      #    file: ./cmd/${{ matrix.service }}/Dockerfile
      #    cache-from: type=gha
      #    cache-to: type=gha,mode=max
      #    platforms: linux/amd64,linux/arm64

      # On release, build service images and push to ECR.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: ${{ github.event.release }}
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        if: ${{ github.event.release }}
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and ship final images
        uses: docker/build-push-action@v2
        if: ${{ github.event.release }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.service }}
          IMAGE_TAG: ${{ github.ref_name }}
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  run-api-proctor-tests:
    name: Run api-proctor tests
    runs-on: ubuntu-latest
    needs: build-and-ship-image
    env:
      PGADMIN_PORT: 5000
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_SERVER: postgres
      POSTGRES_PORT: 5432
    steps:
      - name: Checkout development repo
        uses: actions/checkout@v2
        with:
          repository: nicheinc/development
          token: ${{ secrets.NPM_WRITE_TOKEN }}
          submodules: true

      - name: Download docker image artifacts
        uses: actions/download-artifact@v3

      - name: Parse services into a space-separated string
        id: parse-services
        shell: bash
        run: echo "::set-output name=services::`jq -r 'join(" ")' <<< '${{ inputs.services }}'`"

      - name: Load docker images
        shell: bash
        run: |
          for service in ${{ steps.parse-services.outputs.services }}; do
            docker load --input ${service}/${service}.tar
          done

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # TODO: Once we update the development repo itself to use latest images
      # from ECR (https://app.asana.com/0/1199932090708798/1202699911962363/f),
      # this step will be unnecessary.
      - name: Use latest service images from ECR
        run: sed -i 's/${USER:?USER}/${{ steps.login-ecr.outputs.registry }}/' docker-compose.yml

      - name: Create docker-compose override and AWS credentials files
        env:
          ENCODED_CREDENTIALS: ${{ secrets.DEV_AWS_CREDENTIALS }}
        shell: bash
        run: |
          echo -e "version: '3.7'\nservices:" > docker-compose.override.yaml
          for service in ${{ steps.parse-services.outputs.services }}; do
            echo -e "  ${service}:\n    image: ${service}:ci" >> docker-compose.override.yaml
          done
          echo $ENCODED_CREDENTIALS | base64 -di > vault/aws_credentials

      # TODO: This is a hack to place empty secret files in the vault directory
      # (to satisfy docker-compose.yml requirements) without actually retrieving
      # them from vault.
      - name: Retrieve vault secrets
        shell: bash
        run: |
          touch vault/website.secrets.env
          touch vault/landingpageadmin.secrets.env

      - name: Set up yq for YAML processing
        uses: mikefarah/yq@v4.27.3

      - name: Parse service dependencies
        id: parse-deps
        run: |
          # Traverse depends_on values to build the unified dependency set.
          declare -A work_set # Nodes to be visited
          declare -A deps # Nodes already in the dependency set
          # Initialize the work set to the services from this repo.
          for service in ${{ steps.parse-services.outputs.services }}; do
            work_set[${service}]=1
          done
          # While the work set is nonempty, pop and visit an arbitrary node.
          while [[ ${#work_set[@]} -gt 0 ]]; do
            keys=(${!work_set[@]})
            next=${keys[0]}
            unset work_set[${next}]
            # Add the next node to the dependency set, and add any of its
            # unvisited dependencies to the work set.
            deps[${next}]=1
            next_deps=$(yq ".services.${next}.depends_on" docker-compose.yml | sort | uniq)
            for next_dep in ${next_deps}; do
              if [[ ! ${deps[${next_dep}]} ]]; do
                work_set[${next_dep}]=1
              done
            done
          done
          echo "::set-output name=deps::${!deps[@]}"

      - name: Start postgres and create service databases and roles
        shell: bash
        run: |
          docker-compose up -d postgres
          timeout 1m bash -c 'until docker-compose run postgres pg_isready -d postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres; do sleep 5s; done'
          declare -A dbs
          declare -A roles
          conn_regex='postgres://(\w*):(\w*)@\$\{POSTGRES_SERVER\}/(\w*)'
          for dependency in ${{ steps.parse-deps.outputs.deps }}; do
            # Parse role, password, and DB from POSTGRES_CONNECTION.
            conn=$(yq ".services.${dependency}.environment.POSTGRES_CONNECTION" docker-compose.yml)
            if [[ ${conn} =~ ${conn_regex} ]]; then
              role=${BASH_REMATCH[1]}
              password=${BASH_REMATCH[2]}
              db=${BASH_REMATCH[3]}
              if [[ ! ${dbs[${db}]} ]]; then
                dbs[${db}]=1
                docker exec -i -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
                  psql -h 0.0.0.0 -U ${POSTGRES_USER} -a -c "CREATE DATABASE ${db}"
                context=$(yq ".services.${dependency}.build.context" docker-compose.yml)
                extensions="${context}/sql/extensions.sql"
                if [[ -f ${extensions} ]]; then
                  docker exec -i -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
                    psql -h 0.0.0.0 -U ${POSTGRES_USER} -d ${db} -a -f ${extensions}
                fi
              else
                echo ${db} database already initialized
              fi
              if [[ ! ${roles[${role}]} ]]; then
                roles[${role}]=1
                docker exec -i -e PGPASSWORD=${POSTGRES_PASSWORD} postgres \
                  psql -h 0.0.0.0 -U ${POSTGRES_USER} -a -c \
                  "CREATE ROLE ${role} LOGIN PASSWORD '${password}'"
              else
                echo ${role} role already created
              fi
            fi
          done

      - name: Launch services with dependencies via docker-compose
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          docker-compose pull --include-deps ${{ steps.parse-services.outputs.services }}
          docker-compose up -d ${{ steps.parse-services.outputs.services }}

      - name: Run API Proctor tests
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        shell: bash
        run: |
          docker run --rm --name api-proctor --network host \
            -e READ_POSTGRES_CONNECTION=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:${POSTGRES_PORT} \
            -e WRITE_POSTGRES_CONNECTION=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@localhost:${POSTGRES_PORT} \
            -e NODE_ENV=ci \
            $ECR_REGISTRY/api-proctor:latest \
            tests/${{ github.event.repository.name }}/ --testPathIgnorePatterns=/src/ --passWithNoTests

      - name: Docker Compose logs
        shell: bash
        run: |
          echo "::group::Docker ${{ github.event.repository.name }} logs"
          echo "--- Kafka logs ---"
          docker-compose logs kafka || echo "Kafka not running"
          echo "--- Postgres logs ---"
          docker-compose logs postgres || echo "Postgres not running"
          for service in ${{ steps.parse-services.outputs.services }}; do
            echo "--- ${service} logs ---"
            docker-compose logs ${service}
          done
          echo "::endgroup::"

  # Post release status to #deployment.
  update-slack:
    name: Update Slack
    runs-on: ubuntu-latest
    needs: build-and-ship-image
    if: ${{ github.event.release }}
    steps:
      - name: Post to a Slack channel
        id: slack
        uses: slackapi/slack-github-action@v1.17.0
        with:
          channel-id: 'C2C5JV162'
          slack-message: "GitHub has built `${{ github.event.repository.name }}:${{ github.ref_name }}` for release. :shipitparrot: "
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
