name: Build, Test, and Ship
permissions:
  contents: write
  pull-requests: write
on:
  workflow_call:
    inputs:
      services:
        description: >
          A JSON array containing the names of all services in the repo: the
          eponymous microservice itself, any associated Kafka consumers, etc.
        required: true
        type: string
      bypass-dev-protections:
        description: >
          Use custom user to override branch protections when
          pushing directly to dev
        required: false
        default: false
        type: boolean
    secrets:
      DEV_AWS_CREDENTIALS:
        required: true
      ECR_ACCESS_KEY_ID:
        required: true
      ECR_SECRET_ACCESS_KEY:
        required: true
      GHA_DEV_KEY:
        required: true
      SLACK_BOT_TOKEN:
        required: true
      AWS_ACCOUNT_ID:
        required: true

jobs:
  # Retrieve the minimum Go version from go.mod and output a matrix of all Go
  # versions released since. Skip on release.
  go-versions:
    name: Get supported Go versions
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'release' }}
    outputs:
      matrix: ${{ steps.versions.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set Go versions
        uses: arnested/go-version-action@v1
        id: versions

  # Run unit tests and go vet with each supported Go version. Skip on release.
  unit-test-and-vet:
    name: "Unit test and vet with Go ${{ matrix.go }}"
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'release' }}
    needs: go-versions
    strategy:
      fail-fast: false
      matrix:
        go: ${{ fromJSON(needs.go-versions.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}

      - name: Test
        run: |
          go test -v -cover -race ./...

      - name: Vet
        run: |
          go vet ./...

  # Build the docker images on PR or push to dev/master, ship on release
  build-and-ship-image:
    name: "Build ${{ matrix.service }} image"
    runs-on: ubuntu-latest
    if: ${{ !github.event.pull_request.draft }}
    outputs:
      appversion: ${{ steps.check-version-change.outputs.appversion }}
      chartversion: ${{ steps.check-version-change.outputs.chartversion }}
      appchange: ${{ steps.check-version-change.outputs.appchange }}
      chartchange: ${{ steps.check-version-change.outputs.chartchange }}
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(inputs.services) }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v2

      # Using the version file and GitHub tags, check what new versions we have
      - name: Check Changed Versions
        id: check-version-change
        if: ${{ github.event_name == 'push' }}
        run: |
          . version.env
          chartchange="true"
          appchange="true"
          git fetch origin --tags
          for tag in $(git tag -l); do
            if [[ "${tag}" == "${APPVERSION}" ]]; then
              appchange="false"
            elif [[ "${tag}" == "helm-chart-${CHARTVERSION}" ]]; then
              chartchange="false"
            fi
          done
          echo "::set-output name=appversion::${APPVERSION}"
          echo "::set-output name=chartversion::${CHARTVERSION}"
          echo "::set-output name=appchange::${appchange}"
          echo "::set-output name=chartchange::${chartchange}"

      # On merge to dev make sure if the app changed
      # but the chart version didn't we error out
      - name: Ensure Version Changed
        if: |
          github.event_name == 'push' &&
          steps.check-version-change.outputs.appchange == 'true' &&
          steps.check-version-change.outputs.chartchange != 'true'
        run: |
          exit 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # On push/PR, ensure service images can be built on target platforms.
      - name: Build final images
        uses: docker/build-push-action@v2
        if: |
          github.event_name == 'pull_request' ||
          (github.event_name == 'push' &&
           steps.check-version-change.outputs.appchange == 'false')
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # On release, build service images and push to ECR.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        if: |
          github.event_name == 'push' &&
          steps.check-version-change.outputs.appchange == 'true'
        with:
          aws-access-key-id: ${{ secrets.ECR_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        if: |
          github.event_name == 'push' &&
          steps.check-version-change.outputs.appchange == 'true'
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and ship final images
        uses: docker/build-push-action@v2
        if: |
          github.event_name == 'push' &&
          steps.check-version-change.outputs.appchange == 'true'
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ matrix.service }}
          IMAGE_TAG: ${{ steps.check-version-change.outputs.appversion }}
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  # Builds and ships Helm charts if necessary
  push-charts:
    name: Push Helm Charts
    if: ${{ github.event_name == 'push' || github.event_name == 'release' }}
    uses: nicheinc/actions/.github/workflows/push-helm-charts.yaml@405c3f7cd949c0c557c85199d3206968916e5f6f
    with:
      appchange: ${{ needs.build-and-ship-image.outputs.appchange }}
      appversion: ${{ needs.build-and-ship-image.outputs.appversion }}
      chartchange: ${{ needs.build-and-ship-image.outputs.chartchange }}
      chartversion: ${{ needs.build-and-ship-image.outputs.chartversion }}
      bypass-dev-protections: inputs.bypass-dev-protections
    secrets: inherit
    needs: build-and-ship-image
