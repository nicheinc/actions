name: Run api-proctor tests
description: Run the api-proctor tests for a backend service repo
inputs:
  gha-dev-key:
    description: The GHA_DEV_KEY secret
    required: true
  dev-aws-credentials:
    description: The DEV_AWS_CREDENTIALS secret
    required: true
  ecr-registry:
    description: The output from aws-actions/amazon-ecr-login
    required: true
runs:
  using: composite
  steps:
    - name: Checkout development repo
      uses: actions/checkout@v2
      with:
        repository: nicheinc/development
        ssh-key: ${{ inputs.gha-dev-key }}

    - name: Download docker image artifacts
      uses: actions/download-artifact@v3

    - name: Load docker images
      shell: bash
      run: |
        for service in ${SERVICES}; do
          docker load --input ${service}/${service}.tar
        done

    - name: Create docker-compose override and AWS credentials files
      env:
        ENCODED_CREDENTIALS: ${{ inputs.dev-aws-credentials }}
      shell: bash
      run: |
        echo "services:" >> docker-compose.ci.yaml
        for service in ${SERVICES}; do
          echo -e "  ${service}:\n    image: ${service}:ci" >> docker-compose.ci.yaml
        done
        cat ${{ inputs.ecr-registry }}
        echo $ENCODED_CREDENTIALS | base64 -di > vault/aws_credentials

    - name: Launch service with dependencies in docker-compose
      env:
        REGISTRY: ${{ inputs.ecr-registry }}
      shell: bash
      run: docker-compose -f docker-compose.yml -f docker-compose.ci.yaml up -d ${SERVICES}

    - name: api-proctor health check test
      env:
        ECR_REGISTRY: ${{ inputs.ecr-registry }}
        PGADMIN_PORT: 5000
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_SERVER: postgres
        POSTGRES_PORT: 5432
      shell: bash
      run: |
        docker run \
          --rm \
          --name api-proctor \
          --network host \
          $ECR_REGISTRY/api-proctor:v1.3.0 \
          ${{ github.event.repository.name }}/health.get --testPathIgnorePatterns=/src/ --passWithNoTests

    - name: Docker Compose logs
      shell: bash
      run: |
        echo "::group::Docker ${{ github.event.repository.name }} logs"
        echo "--- Kafka logs ---"
        docker-compose logs kafka || echo "Kafka not running"
        echo "--- Postgres logs ---"
        docker-compose logs postgres || echo "Postgres not running"
        for service in ${SERVICES}; do
          echo "--- ${service} logs ---"
          docker-compose logs ${service}
        done
        echo "::endgroup::"
